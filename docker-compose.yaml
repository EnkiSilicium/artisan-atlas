# docker-compose.yml
name: artisan-atlas-demo

x-health:
  pg: &pg-health
    test: ["CMD-SHELL", "pg_isready -U app -d app -h 127.0.0.1 -p 5432"]
    interval: 3s
    timeout: 3s
    retries: 20
  redis: &redis-health
    test: ["CMD", "redis-cli", "ping"]
    interval: 3s
    timeout: 3s
    retries: 20
  kafka: &kafka-health
    test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list >/dev/null 2>&1"]
    interval: 5s
    timeout: 4s
    retries: 30

volumes:
  pgdata:
  logs:

services:
  # ---------- Infra (no Kafka) ----------
  postgres:
    image: postgres:16-alpine
    profiles: ["infra-nokafka", "infra-all"]
    environment:
      POSTGRES_DB: app
      POSTGRES_USER: app
      POSTGRES_PASSWORD: app
    healthcheck: *pg-health
    ports: ["5432:5432"]
    volumes:
      - pgdata:/var/lib/postgresql/data

  redis:
    image: redis:7-alpine
    profiles: ["infra-nokafka", "infra-all"]
    command: ["redis-server", "--appendonly", "yes"]
    healthcheck: *redis-health
    ports: ["6379:6379"]

  # ---------- Kafka (single node, no ZooKeeper) ----------
  kafka:
    image: bitnami/kafka:3.7.0
    profiles: ["infra-all"]
    environment:
      KAFKA_CFG_NODE_ID: "1"
      KAFKA_CFG_PROCESS_ROLES: "broker,controller"
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
      KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT"
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"


      KAFKA_CFG_DEFAULT_REPLICATION_FACTOR: "1"
      KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: "1"
      KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: "1"
      KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR: "1"
      KAFKA_CFG_NUM_PARTITIONS: "1"
      KAFKA_CFG_GROUP_INITIAL_REBALANCE_DELAY_MS: "0"
      
      KAFKA_KRAFT_CLUSTER_ID: "abcdefghijklmnopqrstuv"
    healthcheck: *kafka-health
    ports: ["9092:9092"]

  # ---------- Apps: bonus-service (Redis MQ) ----------
  bonus-service-redis:
    image: ghcr.io/enkisilicium/bonus-service:latest
    profiles: ["apps-redis"]
    depends_on:
      postgres: { condition: service_healthy }
      redis:    { condition: service_healthy }
    environment:
      # Logging
      NODE_ENV: "development"
      DEBUG: "false"
      LOGFILE_OUTPUT_LOCATION: "/logs/logfile.log"

      # HTTP
      BONUS_PROC_HTTP_PORT: "3003"
      BONUS_READ_HTTP_PORT: "3004"
      HTTP_PREFIX: "api"

      # Redis
      REDIS_HOST: "redis"
      REDIS_PORT: "6379"

      # Database
      PG_URL: ""                # left blank per your env
      PG_HOST: "postgres"
      PG_PORT: "5432"
      PG_USER: "app"
      PG_PASSWORD: "app"
      PG_DB: "app"
      DB_SCHEMA: "public"
      PG_SSL: "false"
      PG_POOL_MAX: "10"
      PG_POOL_MIN: "0"
      PG_POOL_IDLE_MS: "30000"
      PG_POOL_CONN_MS: "10000"
      TYPEORM_LOGGING: ""
      TYPEORM_SLOW_MS: "500"
      TYPEORM_MIGRATIONS_RUN: "false"

 
      KAFKA_AWS_MODE: "false"
      KAFKA_AUTH_ROLEID: ""
      KAFKA_AUTH_ACCESSKEYID: ""
      KAFKA_AUTH_SECRETACCESSKEY: ""
      KAFKA_BROKER_HOSTNAME: "kafka"
      KAFKA_BROKER_PORT: "9092"
      KAFKA_CLIENT_ID: "bonus-service"
      KAFKA_CONSUMER_GROUPID: "bonus-service"
      KAFKA_RETRIES: "8"
      BUNDLED_SWAGGER: "true"

      # Messaging
      USE_REDIS_MQ: "true"
    ports:
      - "3003:3003"
      - "3004:3004"
    restart: unless-stopped


  # ---------- Apps: ORDER-SERVICE ----------
  order-service-redis:
    image: ghcr.io/enkisilicium/order-service:v.1
    profiles: ["apps-redis"]
    depends_on:
      postgres: { condition: service_healthy }
      redis:    { condition: service_healthy }
    environment:
      # Logging
      NODE_ENV: "development"
      DEBUG: "false"
      LOGFILE_OUTPUT_LOCATION: "/logs/logfile.log"

      # HTTP
      ORDER_WRKFLOW_HTTP_PORT: "3001"
      ORDER_READ_HTTP_PORT: "3002"
      HTTP_PREFIX: "api"

      # Redis
      REDIS_HOST: "redis"
      REDIS_PORT: "6379"

      # Database
      PG_URL: ""                    
      PG_HOST: "postgres"
      PG_PORT: "5432"
      PG_USER: "app"
      PG_PASSWORD: "app"
      PG_DB: "app"
      DB_SCHEMA: "public"
      PG_SSL: "false"
      PG_POOL_MAX: "10"
      PG_POOL_MIN: "0"
      PG_POOL_IDLE_MS: "30000"
      PG_POOL_CONN_MS: "10000"
      TYPEORM_LOGGING: ""           
      TYPEORM_SLOW_MS: "500"

      # Authentication
      JWT_PUBLIC_KEY: ""          
      JWT_AUD: ""                 
      JWT_ISS: ""                  
      DISABLE_AUTH: "true"

      # Kafka (present even in Redis mode; harmless)
      KAFKA_AWS_MODE: "false"
      KAFKA_AUTH_ROLEID: ""
      KAFKA_AUTH_ACCESSKEYID: ""
      KAFKA_AUTH_SECRETACCESSKEY: ""
      KAFKA_BROKER_HOSTNAME: "kafka"
      KAFKA_BROKER_PORT: "9092"
      KAFKA_CLIENT_ID: "order-service"
      KAFKA_CONSUMER_GROUPID: "order-service"
      KAFKA_RETRIES: "8"

      # Messaging toggle
      USE_REDIS_MQ: "true"

      BUNDLED_SWAGGER: "true"
    ports:
      - "3001:3001"
      - "3002:3002"
    volumes:
      - logs:/logs
    restart: unless-stopped

  order-service-kafka:
    image: ghcr.io/enkisilicium/order-service:v.1
    profiles: ["apps-kafka"]
    depends_on:
      postgres: { condition: service_healthy }
      redis:    { condition: service_healthy }
      kafka:    { condition: service_healthy }
    environment:
      NODE_ENV: "development"
      DEBUG: "false"
      LOGFILE_OUTPUT_LOCATION: "/logs/logfile.log"

      ORDER_WRKFLOW_HTTP_PORT: "3001"
      ORDER_READ_HTTP_PORT: "3002"
      HTTP_PREFIX: "api"

      REDIS_HOST: "redis"
      REDIS_PORT: "6379"

      PG_URL: ""
      PG_HOST: "postgres"
      PG_PORT: "5432"
      PG_USER: "app"
      PG_PASSWORD: "app"
      PG_DB: "app"
      DB_SCHEMA: "public"
      PG_SSL: "false"
      PG_POOL_MAX: "10"
      PG_POOL_MIN: "0"
      PG_POOL_IDLE_MS: "30000"
      PG_POOL_CONN_MS: "10000"
      TYPEORM_LOGGING: ""
      TYPEORM_SLOW_MS: "500"

      JWT_PUBLIC_KEY: ""
      JWT_AUD: ""
      JWT_ISS: ""
      DISABLE_AUTH: "true"

      KAFKA_AWS_MODE: "false"
      KAFKA_AUTH_ROLEID: ""
      KAFKA_AUTH_ACCESSKEYID: ""
      KAFKA_AUTH_SECRETACCESSKEY: ""
      KAFKA_BROKER_HOSTNAME: "kafka"
      KAFKA_BROKER_PORT: "9092"
      KAFKA_CLIENT_ID: "order-service"
      KAFKA_CONSUMER_GROUPID: "order-service"
      KAFKA_RETRIES: "8"

      USE_REDIS_MQ: "false"


      BUNDLED_SWAGGER: "true"
    ports:
      - "3001:3001"
      - "3002:3002"
    volumes:
      - logs:/logs
    restart: unless-stopped




  # ---------- Apps: bonus-service (Kafka MQ) ----------
  bonus-service-kafka:
    image: ghcr.io/enkisilicium/bonus-service:latest
    profiles: ["apps-kafka"]
    depends_on:
      postgres: { condition: service_healthy }
      redis:    { condition: service_healthy }
      kafka:    { condition: service_healthy }
    environment:
      # Logging
      NODE_ENV: "development"
      DEBUG: "false"
      LOGFILE_OUTPUT_LOCATION: "/logs/logfile.log"

      # HTTP
      BONUS_PROC_HTTP_PORT: "3003"
      BONUS_READ_HTTP_PORT: "3004"
      HTTP_PREFIX: "api"

      # Redis (may still be used for caching)
      REDIS_HOST: "redis"
      REDIS_PORT: "6379"

      # Database
      PG_URL: ""
      PG_HOST: "postgres"
      PG_PORT: "5432"
      PG_USER: "app"
      PG_PASSWORD: "app"
      PG_DB: "app"
      DB_SCHEMA: "public"
      PG_SSL: "false"
      PG_POOL_MAX: "10"
      PG_POOL_MIN: "0"
      PG_POOL_IDLE_MS: "30000"
      PG_POOL_CONN_MS: "10000"
      TYPEORM_LOGGING: ""
      TYPEORM_SLOW_MS: "500"
      TYPEORM_MIGRATIONS_RUN: "false"

      # Kafka
      KAFKA_AWS_MODE: "false"
      KAFKA_AUTH_ROLEID: ""
      KAFKA_AUTH_ACCESSKEYID: ""
      KAFKA_AUTH_SECRETACCESSKEY: ""
      KAFKA_BROKER_HOSTNAME: "kafka"
      KAFKA_BROKER_PORT: "9092"
      KAFKA_CLIENT_ID: "bonus-service"
      KAFKA_CONSUMER_GROUPID: "bonus-service"
      KAFKA_RETRIES: "8"
      

      BUNDLED_SWAGGER: "true"
      # Messaging
      USE_REDIS_MQ: "false"
    ports:
      - "3003:3003"
      - "3004:3004"
    restart: unless-stopped
